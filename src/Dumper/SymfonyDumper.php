<?php

namespace Creads\Api2Symfony\Dumper;

use Creads\Api2Symfony\Mock\ControllerMock;
use Creads\Api2Symfony\Mock\ActionMock;
use Creads\Api2Symfony\Mock\ResponseMock;
use Creads\Api2Symfony\ClassDefinition\Dumper;
use Creads\Api2Symfony\ClassDefinition\Definition;
use Creads\Api2Symfony\ClassDefinition\Method;
use Creads\Api2Symfony\ClassDefinition\Property;

/**
 * Dump a symfony controller
 *
 * @author Damien Pitard <d.pitard@creads.org>
 */
class SymfonyDumper extends AbstractFileDumper
{
    /**
     * {@inheritDoc}
     */
    protected function render(ControllerMock $controller)
    {

        $definition = $this->getClassDefinition($controller);

        $dumper = new Dumper($definition);

        return $dumper->dump();
    }

    /**
     * Get class definition corresponding to ControllerMock
     *
     * @param ControllerMock $controller
     *
     * @return Definition
     */
    protected function getClassDefinition(ControllerMock $controller)
    {
        $definition = new Definition($controller->getClassName());
        $definition->setParentClass('Controller');
        $description = $controller->getDescription()?$controller->getDescription():'<no description>';
        $definition->setUses(array(
            'Symfony\Bundle\FrameworkBundle\Controller\Controller',
            'Symfony\Component\HttpFoundation\Request',
            'Symfony\Component\HttpFoundation\Response',
            'Symfony\Component\HttpKernel\Exception\HttpException',
            'Symfony\Component\HttpKernel\Exception\BadRequestHttpException',
            'Sensio\Bundle\FrameworkExtraBundle\Configuration\Route',
            'Sensio\Bundle\FrameworkExtraBundle\Configuration\Method',

        ));


        $definition->setDocComment(
<<< EOD
/**
* {$description}
*
* This class has been auto-generated by Api2Symfony.
* @see https://github.com/creads/api2symfony
*/
EOD
        );

        foreach ($controller->getActions() as $action) {
            $method = $this->getMethodDefinition($action);
            $definition->addMethod($method);
        };

        return $definition;
    }

    /**
     * Get method definition corresponding to action mock
     *
     * @param ActionMock $action
     *
     * @return Method
     */
    protected function getMethodDefinition(ActionMock $action)
    {

        $method = new Method('public', $action->getName(), 'Request $request', '');
        $description = $action->getDescription()?$action->getDescription():'<no description>';
        $method->setDocComment(
<<<EOD
/**
 * {$description}
 *
 * @Route(
 *   "{$action->getRoute()->getPath()}",
 *   name="{$action->getRoute()->getName()}"
 * )
 * @Method({"{$action->getMethod()}"})
 *
 * @return Response
 */
EOD
        );

        $code = '';
        $method->setAutoIndentation(false);
        foreach ($action->getResponses() as $response) {
            $code .= $this->getResponseCode($response);
        }
        $code .=
<<< EOD

        //returns an exception if the api does not know how to handle the request
        throw new BadRequestHttpException("Don't know how to handle this request");
EOD;
        $method->setCode($code);

        return $method;
    }

    /**
     * Get code corresponding to ResponseMock
     *
     * @param ResponseMock $response
     *
     * @return string
     */
    protected function getResponseCode(ResponseMock $response)
    {
        $body = trim(addcslashes($response->getBody(), "'"));
        $description = $response->getDescription()?$response->getDescription():'<no description>';
        if ($response->getCode() >= 200 && $response->getCode() < 300) { //valid response
            $headers = Dumper::renderArray($response->getHeaders(), 4);
            $code = <<< EOD

        if ('{$response->getFormat()}' === \$request->get('_format')) {

            return new Response(
                function () {
                    return <<< EOF
{$body}
EOF;
                },
                {$response->getCode()},
                {$headers}
            );
        }

EOD;
        } else { //invalid response
            $headers = Dumper::renderArray($response->getHeaders(), 3);
            $code = <<< EOD

        throw new HttpException(
            {$response->getCode()},
            function () {
                return <<< EOF
{$body}
EOF;
            },
            null,
            {$headers}
        );

EOD;
        }

        return $code;
    }
}
